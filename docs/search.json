[
  {
    "objectID": "ggplot2-module.html",
    "href": "ggplot2-module.html",
    "title": "Statistical Test Visualization with ggplot2",
    "section": "",
    "text": "This learning module will focus on the use of the ggplot2 library with the help of a couple of its subsidiaries to create beautiful visualizations of your statistic test results. I will employ tidy syntax throughout the module, so if you are unfamiliar with the use of dplyr and the magrittr pipe, here are some resources that can help:\nData Wrangling with dplyr and tidyr Cheat sheet\nPipe Operator\nI will aim to be as transparent as possible with the code I demonstrate here, by utilizing three strategies that help viewers of my code understand what I am doing and why:\n\nI’ll clarify my arguments within the code, although the code will run just fine without the extra statements. For example, I’ll type ggplot(data = mydata) rather than ggplot(mydata)\nI’ll use commented out annotations within the code chunks to explain in plain English what each line is doing. I’ll load my libraries in the following code chunk and use it as example of what I mean:\n\n\n# packing libraries for a fun trip\n# tidyverse contains dplyr and ggplot2 a well as many other packages I like to use, so I install the whole thing. Controversial, but its never slowed me down. \npack_list <- c(\"tidyverse\", \"DT\", \"readr\", \"ggmosaic\", \"GGally\", \"stats\", \"corrplot\", \"knitr\", \"RColorBrewer\", \"viridis\")\n\n# if the pacman package is not already installed, install it\nif(!require(\"pacman\")) {install.packages(\"pacman\")}\n\n# use the p_load function to check if packages in the list are installed and if any are not, install the ones that are missing \npacman::p_load(pack_list, character.only = TRUE)\n\n\n# need this to use the pipe operator\n# Yes, R has a new base pipe |> but I have not begun using it yet and I am not certain yet how well it plays well with all my favorite functions \nlibrary(magrittr)\n\n# load ggplot2 because I don't like to label all of the internal functions necessary to create plots with ggplot2:: ; it makes my code ugly\nlibrary(ggplot2)\n\n\nFinally, I will specify the package for functions that I use in my code using the double colons ::, as in readr::read_csv(), so that you know where to find these functions later.\n\nSomething else I want to add here for your benefit as potentially growing R users: This html document was created using an Rmarkdown script. I’ve been using Rmarkdown to create nice looking html documents for the better part of 2 years and I love it. While I was creating this module, however, a new publishing tool called Quarto became available via Rstudio; you will see it as a native document type under File >> New File as soon as you update your Rstudio version. QMD files will operate a lot like RMD files and can be used along with the rest of the Quarto tools to do all kinds of things like create books or websites. Check it out!\n\n\nI’ll provide some suggested activities and explorations to help you gain the most from this module. Spend as long as you feel is helpful and interesting on these.\n\nHow is the method I used to load packages different from methods you might have used or seen previously? How might using this method change the way you have to code, and what are the benefits and drawbacks?\nWhat is the magrittr pipe and how is it different from the new base R pipe?\nWhat other R cheat sheets are out there? Find 3.\n\n\n\n\nIn this learning module we will introduce basics of using the ggplot2 package and take a tour of a handful of useful plot types you will want to know how to create in order to represent statistical test results.\nggplot2 is a versatile and (usually) easy to use package for creating beautiful graphics from data in R. ggplot2 takes data in the form of a data frame and creates a ggplot object, to which you can then add plot aesthetics. It is possible to make all kinds of custom adjustments in ggplot2, and to learn how to tweak your plots to suit your preferences I highly recommend checking out the ggplot2 cheat sheet. Do bear in mind when using ggplot2 that there is a caveat to the simplicity of using such a streamlined set of functions to make otherwise complicated figures.ggplot2 WILL make assumptions about things like the axis scales, inclusion of a legend, and colors to use, if you let it. These features are almost infinitely customize-able but once you start looking for ways to tweak your plots, you will find it helpful to know your way around help forums such as the ever-popular stack overflow, and the various R community resources.\nI highly encourage anyone who will be creating plots to visualize data to visit The ggplot2 Book and The R Graphics Cookbook for oodles of inspiration and advice.\nThe steps that go into creating a ggplot graphic can be broadly broken down into:\n\ncreating the ggplot object and add aesthetics: this means declaring your variables of interest\n\nggplot(data =        , mapping = aes(x =         , y =         ))\n\nadd plot geom layers to your graphic\n\ngeom_scatterplot()\n\ncustomize your plot by modifying themes, axes and labels\n\ntheme_minimal()\nlabs(x = \" \", y = \" \", title = \" \")\n\n\n\nRead in Kitsap Streams data and look at the structure\n\n# read the csv containing Kitsap Streams data\n# readr::read_csv outputs a tibble. utils;:read.csv outputs a data frame. There are differences in the ways these packages make assumptions about your data but they are irrelevant to us here. \nkitsap <- readr::read_csv(\"KitsapStreams.csv\")\n\n# look at the data\nutils::str(kitsap)\n\nspec_tbl_df [1,186 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ RiverMeter: num [1:1186] 1 2 3 4 5 7 8 9 10 11 ...\n $ DomVeg    : chr [1:1186] \"Native\" \"Restored\" \"Native\" \"Invasive\" ...\n $ Site      : chr [1:1186] \"ClearCreek\" \"ClearCreek\" \"ClearCreek\" \"ClearCreek\" ...\n $ PerVeg    : num [1:1186] 12 217 139 36 6 51 91 115 21 42 ...\n $ SpRich    : num [1:1186] 4.16 2.5 3.55 2.24 2.46 2.71 3.95 1.87 2.92 4.32 ...\n $ FloRes    : num [1:1186] 4.28 2.59 3.8 2.01 2.18 1.08 3.74 1.67 2.68 3.01 ...\n $ BevDam    : chr [1:1186] \"no\" \"yes\" \"no\" \"no\" ...\n $ LogJam    : chr [1:1186] \"no\" \"no\" \"no\" \"no\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   RiverMeter = col_double(),\n  ..   DomVeg = col_character(),\n  ..   Site = col_character(),\n  ..   PerVeg = col_double(),\n  ..   SpRich = col_double(),\n  ..   FloRes = col_double(),\n  ..   BevDam = col_character(),\n  ..   LogJam = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nThe variables in the data don’t require much explanation:\nDomVeg = whether the vegetation was invasive, native, or restored\nSpRich = number of plant species counted in a 1 m X 1m quadrat replicated three times\nPerVeg = percent vegetative cover\nBevDam = presence of beaver dam\nLogJam = presence of natural log jams\nThis dataset is useful for demonstrating a variety of common statistical tests that you might want to perform. Where these data do not have the characteristics I need to demonstrate a plot, I will instead use the R built in iris dataset, which contains measurements of width and length for petals and sepals for three different species of iris.\n\n# look at the structure if the iris data\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\nThese variables, I believe, ought to be self-explanatory.\n\n\n\nIt is a nice feature of markdown that it outputs html documents which can be made interactive. The code below will print an interactive table of your data. While it is often not a good idea to burden your audience by printing your entire data to your output, there will be times where you might want to do this, and in those times, it might as well look good.\n\n# Make a pretty table of the kitsap data\nDT::datatable(data = kitsap)\n\n\n\n\n\n\n\n\n\nOpen up an R script and make sure to load the ggplot2 library and the Kitsap Streams data. Run the code below.\n\n\nggplot(data = kitsap, mapping = aes(DomVeg, SpRich)) + geom_bar()\n\nDid the code run? Can you figure out why not? Can you figure out how to fix it? This is a bit tricky so don’t hesitate to search the internet for explanations and solutions.\n\nPlay with 3 different combinations of xy variables and geoms. When you go to add the geom, pause at geom_ and take a look at the list that pops up. Explore. Can you predict what plot types will work with which combinations of variables?"
  },
  {
    "objectID": "ggplot2-module.html#mosaic-plots",
    "href": "ggplot2-module.html#mosaic-plots",
    "title": "Statistical Test Visualization with ggplot2",
    "section": "Mosaic Plots",
    "text": "Mosaic Plots\nTake note of the differences between these plots. Which one do you prefer, visually? Which method suits you best?\n\nWith geom_bar()\nTo create a plot of the proportions of various vegetation types at each site, ggplot will need something like an index column so that it has values to add to each of the categories in the stacked bar. The kitsap data has the RiverMeter column, which suits our purposes, but you could easily create a column to meet your needs with the following code:\nas.numeric(rownames(your_data_frame))\n\n# create the ggplot object with variables of interest\nggplot2::ggplot(kitsap, mapping = aes(fill = DomVeg, y = RiverMeter, x = Site)) +\n  # add position and stat arguments to geom_bar\n  geom_bar(position = \"fill\", stat = \"identity\") +\n  # make the labels helpful\n  ggplot2::labs(y = \"Vegetation Percentage\", title = \"Percent Vegetation Types at Four Kitsap Streams\") +\n  # theme_minimal removes the dark background and extra black lines which I find to be pleasantly simplifying for this type of plot\n  ggplot2::theme_minimal()\n\n\n\n\n\n\nWith ggmosaic\nThe ggmosaic library contains purpose built tools for building very slick looking mosaic plots with minimal coding. Beware of losing touch with the elements of your data that are actually going into this plot, or what assumptions the ggmosaic package might be making about your data.\nUses the ggplot add-on package ggmosaic. For information visit the CRAN page for the ggmosaic package\n\n# for reasons I do not yet understand, this code does not run unless I load the whole library \nlibrary(ggmosaic)\n\n# create a ggplot object from the kitsap data and name it kitmos. note that the + operator is used to add layers to the ggplot object\nkit_mos <- ggplot2::ggplot(data = kitsap) +\n  # add the geom object for the mosaic plot. note this is a separate package!\n  ggmosaic::geom_mosaic(aes(x = product(Site), fill = DomVeg)) +\n  # pick a nice pre-packaged theme that will refine the appearance of our plot\n  ggmosaic::theme_mosaic() +\n  # refine the axis labels and add a title\n  ggplot2::labs(y = \"Vegetation Percentage\", title = \"Percent Vegetation Types at Kitsap Streams\") +\n  # remove legend; ggplot2 adds it automatically when we add color using fill = \n  ggplot2::theme(legend.position = \"none\")\n\nkit_mos\n\n\n\n\nIt couldn’t be simpler. If you choose to use this method to create your mosaic plots, don’t lose sight of what these convenient functions obscure about how they use your data, lest you create a misleading label.\n\n\nExercise:\n\nSee if you can add scale_y_continuous() with arguments for breaks = c() and labels = c() to the first mosaic plot to make the y axis look like the second plot. Remove the legend using + theme() with the appropriate argument.\nConsider what you like and don’t like about each of these plots. Can you find methods in ggplot2 to make your ideal mosaic plot?"
  },
  {
    "objectID": "ggplot2-module.html#line-graphs",
    "href": "ggplot2-module.html#line-graphs",
    "title": "Statistical Test Visualization with ggplot2",
    "section": "Line Graphs",
    "text": "Line Graphs\nMaking a line graph with a discrete x variable in ggplot2 required a bit of wrangling. The problem is that the geom_pointrange() function can take a numeric or string vector for the x variable, but creating a line between the two means becomes difficult unless the x variable is numeric. I get around that here by converting the binary LogJam variable from yes/no to 0/1, then change the labels back to yes/no once I’ve built the plot.\n\n# Create a numeric binary variable for LogJam\nkitsap_line <- kitsap %>% dplyr::mutate(LogJam_num = dplyr::if_else(LogJam == \"yes\", 1, 2))\n\n# vector of labels to later restore x axis tick labels\nlabels = c(\"yes\", \"no\")\n\n# data frame to feed x and y values to geom_line()\nmean_veg <- kitsap_line %>% dplyr::group_by(LogJam_num) %>%\n  dplyr::summarise(Mean = mean(PerVeg))\n\n# build the ggplot object\nkit_line <- ggplot2::ggplot(kitsap_line) +\n  # geom_pointrange layer adds means with error bars\n  ggplot2::geom_pointrange(\n    # identify variables of interest\n    mapping = aes(x = LogJam_num, y = PerVeg),\n    # statistical transformation to use on this layer\n    stat = \"summary\",\n    # y upper and lower limits\n    fun.ymin = min,\n    fun.ymax = max,\n    # function to generate points should be means\n    fun.y = mean\n  ) +\n  # add a layer for the line connecting the points\n  ggplot2::geom_line(aes(x = LogJam_num, y = Mean), data = mean_veg) +\n  # customize x axis \n  ggplot2::scale_x_continuous(\n    # only want two ticks, no intermediates\n    breaks = c(1, 2),\n    # add space on the edges of the x axis so that the ticks are more centered in the plot\n    expand = expansion(c(.35, .35)),\n    # revert labels back to yes/no from 1/2\n    labels = c(\"yes\", \"no\")\n  ) +\n  # add nice axis and main titles\n  ggplot2::labs(x = \"Presence of Log Jam\", y = \"Percent Vegetation Cover\", title = \"Percent Vegetation Cover at Sites With and Without Log Jams\")\n\n# call the plot\nkit_line\n\n\n\n\nBut, I have a problem with this. In this plot, it looks like groups have a real difference. That is because the actual range of the PerVeg variable is a lot larger than the range displayed on this graph; it is important to always pay attention to the assumptions that ggplot will make about how you want your data displayed, and I think that scales are an area of special concern since they can distort your findings. I’m going to create a second plot, altering the y axis so that it represents the full range of the data.\n\n# create a variable to contain the y axis (PerVeg) maximum\nymax <- max(kitsap_line$PerVeg)\n\n\n# same plot as before; this is why naming your ggplot objects can be so handy\nkit_line_rangeexpand <- kit_line +\n  # alter the scale of the y axis, setting the max to the upper limit of the PerVeg variable\n  ggplot2::scale_y_continuous(limits = c(0, ymax))\n\n# call the plot\nkit_line_rangeexpand\n\n\n\n\nNow it is obvious that the difference in the means is not so great relative to the range of the two groups."
  },
  {
    "objectID": "ggplot2-module.html#boxplots-for-t-tests",
    "href": "ggplot2-module.html#boxplots-for-t-tests",
    "title": "Statistical Test Visualization with ggplot2",
    "section": "BoxPlots for T-tests",
    "text": "BoxPlots for T-tests\nThe box plot may be a more effective way to display this particular test result.\n\n# create the ggplot object and identify variables of interest\nggplot2::ggplot(data = kitsap, mapping = aes(x = LogJam, y = PerVeg)) +\n  # add box plot geom\n  ggplot2::geom_boxplot()\n\n\n\n\n\nExercise\n\nFix the axis labels on the last plot.\nWhen I used both the breaks() and expand() arguments in the scale_x_continuous() layer of my line graph, I actually wrote more code than was necessary. Can you figure out how to make fewer arguments and still get the x axis to look the way you want it to?"
  },
  {
    "objectID": "ggplot2-module.html#bar-plots",
    "href": "ggplot2-module.html#bar-plots",
    "title": "Statistical Test Visualization with ggplot2",
    "section": "Bar Plots",
    "text": "Bar Plots\nUseful for displaying counts or mean values across a categorical variable\n\n# create the ggplot object, specify to add color by the x variable\nggplot2::ggplot(data = kitsap, mapping = aes(x = DomVeg, y = SpRich, fill = DomVeg)) +\n  # stat = summary to display means\n  ggplot2::geom_bar(stat = \"identity\") +\n  # change the colors; default is for continuous data so declare discrete = TRUE\n  viridis::scale_fill_viridis(discrete = TRUE) +\n  # add nice axis labels\n  ggplot2::labs(x = \"Dominant Vegetation Type\", y = \"Species Richness\", title = \"Species Richness by Dominant Vegetation Type\") +\n  # get rid of the dark background\n  theme_minimal() + \n  # we don't need a legend for this type of plot, but ggplot 2 will add one when we specify fill = DomVeg \n  ggplot2::theme(legend.position = \"none\")"
  },
  {
    "objectID": "ggplot2-module.html#box-plots",
    "href": "ggplot2-module.html#box-plots",
    "title": "Statistical Test Visualization with ggplot2",
    "section": "Box Plots",
    "text": "Box Plots\nAnother great way to display the results of your ANOVA.\n\nggplot2::ggplot(data = kitsap, mapping = aes(x = DomVeg, y = SpRich)) +\n  ggplot2::geom_boxplot() +\n  ggplot2::labs(x = \"Dominant Vegetation Type\", y = \"Species Richness\", title = \"Species Richness By Dominant Vegetation Type\")\n\n\n\n\n\nExercise\n\nDo you like the gray background in the box plot? Get rid of it.\nWhat do you think of the color palette for the bar plot? Change it. Explore Chapter 12 of the R Graphics Cookbook. Play.\nTake the line theme(legend.position = \"none\") and move it to the very end of the code for building the plot. What happens? Why?"
  },
  {
    "objectID": "ggplot2-module.html#tables",
    "href": "ggplot2-module.html#tables",
    "title": "Statistical Test Visualization with ggplot2",
    "section": "Tables",
    "text": "Tables\nThere are only three rows of numeric data to test correlations. With this small number of variables, we can reasonably print a table of correlations to our output.\n\n# generate a correlation matrix of the numeric variables of the kitsap data\nkit_cor <- stats::cor(kitsap[ ,4:6])\n\n# a nice looking table to print in our output\nknitr::kable(kit_cor)\n\n\n\n\n\nPerVeg\nSpRich\nFloRes\n\n\n\n\nPerVeg\n1.0000000\n-0.0166539\n0.0018838\n\n\nSpRich\n-0.0166539\n1.0000000\n0.7338875\n\n\nFloRes\n0.0018838\n0.7338875\n1.0000000"
  },
  {
    "objectID": "ggplot2-module.html#heatmaps",
    "href": "ggplot2-module.html#heatmaps",
    "title": "Statistical Test Visualization with ggplot2",
    "section": "Heatmaps",
    "text": "Heatmaps\nHeat maps can be helpful if you are trying to determine the degree or variety of correlations present in your data. This becomes more helpful as your data become larger and I find it works best to display 10-50 rows per heat map.\nI am switching to using the built-in iris data here so that you can see how the color temperature works to display different correlations.\n\n# heat map of correlations. use only numeric variables\niris_cor <- stats::cor(iris[ ,2:4])\n\n# correlation heat map using corrplot\ncorrplot::corrplot(iris_cor, method = \"color\")\n\n\n\n\n\nExercise:\nThere’s another function that will give you correlations in addition to a lot of other output. It can be helpful if you are doing exploratory data analysis on a dataset with a few variables of interest where you are curious about the relationships between all or some of the variables. Run the ggpairs() function from the GGally package. Break up the data if you want to by using square brackets to cherry pick what columns you want to compare, as in kitsap[ ,2:8]. See what you can learn from the results.\nGet started with this line of code: GGally::ggpairs(kitsap)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "en-site.html",
    "href": "en-site.html",
    "title": "eneb-pages",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "~_/)~",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  }
]